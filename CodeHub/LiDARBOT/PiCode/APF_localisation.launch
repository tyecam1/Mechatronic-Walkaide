<?xml version="1.0"?>
<launch>

    <!-- Start YDLIDAR -->
    <include file="$(find ydlidar)/launch/useful/lidar.launch"/>

    <!-- Rosserial for Arduino -->
    <param name="use_sim_time" value="false"/>

    <node pkg="apf_bot" type="goal_converter.py" name="goal_converter" output="screen" />

    <node name="rosserial_mega" pkg="rosserial_python" type="serial_node.py" output = "screen">
        <param name="port" value="/dev/ttyACM0"/>
        <param name="baud" value="57600"/>
    </node>


    <!-- Start Hector SLAM -->
    <node name="hector_mapping" pkg="hector_mapping" type="hector_mapping" output="screen">
        <!--<remap from="map" to="mapcurrent_frame"/>-->
        <param name="map_frame" value="map"/>
        <param name="base_frame" value="base_link"/>
        <param name="odom_frame" value="base_link"/>
        <param name="pub_odometry" value="true"/>
        <param name="use_tf_scan_transformation" value="true"/>
        <param name="use_tf_pose_start_estimate" value="false"/>
        <param name="pub_map_odom_transform" value="true"/>

        <param name="map_resolution" value="0.08"/>
        <param name="map_size" value="1024"/>
        <param name="map_start_x" value="0.5"/>
        <param name="map_start_y" value="0.5"/>
        <param name="map_multi_res_levels" value="2"/>

        <param name="update_factor_free" value="0.3"/>
        <param name="update_factor_occupied" value="0.7"/>
        <param name="map_update_distance_thresh" value="0.15"/>
        <param name="map_update_angle_thresh" value="0.02"/>
        <param name="laser_z_min_value" value="-1.0"/>
        <param name="laser_z_max_value" value="1.0"/>

        <param name="advertise_map_service" value="true"/>

        <param name="scan_subscriber_queue_size" value="10"/>
        <param name="scan_topic" value="scan"/>
        <param name="pub_map_scanmatch_transform" value="true"/>
        <param name="tf_map_scanmatch_transform_frame_name" value="scanmatcher_frame"/>
    </node>

    <!--  Start Odom Transformer (uses Arduino yaw correction) REDUNDANT WITH EKF PACKAGE -->
    <node name="odomtransformer3" pkg="apf_bot" type="odomtransformer3.py" output="screen">
        <param name="odom_input" value="scanmatch_odom"/>
        <param name="tf_output" value="base_link"/>
        <param name="yaw_input" value="/arduino/yaw"/>
    </node>
    
    
    <!-- Does same thing as odomtransformer3 but can be tuned for better effect (more computational load)
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_filter_node" clear_params="true">
         Load EKF Parameters from YAML 
	<rosparam file="$(find apf_bot)/config/ekf_config.yaml" command="load" />


	<param name="frequency" value="15" />
        <param name="sensor_timeout" value="0.1" />
	    
         IMU Data  
        <remap from="imu0" to="/arduino/imu" />
        <param name="imu0_config" value="false, false, false,  # X Y Z position
                                          true,  true,  true,  # Roll Pitch Yaw (quaternion)
                                          false, false, false, # Linear velocity
                                          false,  false,  false, # Angular velocity X Y Z
                                          true, false, false"/> # Linear acceleration
	<param name="imu0_differential" value="true"/>
	<param name="imu0_relative" value="true"/>
	<param name="imu0_remove_gravitational_acceleration" value="true"/>
	<param name="imu0_queue_size" value="10"/>

         LIDAR Odometry  
        <remap from="odom0" to="/scanmatch_odom" />
        <param name="odom0_config" value="true,  true,  false, # X Y Z position
                                          false, false, true, # Roll Pitch Yaw orientation
                                          true,  false,  false, # Linear velocity X Y Z
                                          true, false, false # Angular velocity
                                          false, false, false" />
	<param name="odom0_differential" value="false"/>
	<param name="odom0_queue_size" value="5"/>
    
        <param name="two_d_mode" value="true" />
        <param name="transform_time_offset" value="0.0" />
	<param name="publish_tf" value="true" />
        <param name="map_frame" value="map" />
        <param name="odom_frame" value="odom" />
        <param name="base_link_frame" value="base_link" />
    </node>
    -->

    <!-- Obstacle Detector Node -->
    <node name="obstacle_detector" pkg="apf_bot" type="obstacle_detector.py" output="screen" />

    <!-- Static Transform from base_link to laser_frame -->
    <node pkg="tf" type="static_transform_publisher" name="base_to_laser"
          args="-0.05 0 0.075 0 0 0 1 base_link laser_frame 15"/>

    <!-- Visualisation in RViz -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find hector_slam_launch)/rviz_cfg/mapping_demo.rviz"/>

</launch>
